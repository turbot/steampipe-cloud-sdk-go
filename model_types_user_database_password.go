/*
Steampipe Cloud

Interrogate your CloudOps data with the simplicity and power of SQL, then share your discoveries using Steampipe Cloud.

API version: 1.0
Contact: help@steampipe.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package steampipecloud

import (
	"encoding/json"
)

// TypesUserDatabasePassword struct for TypesUserDatabasePassword
type TypesUserDatabasePassword struct {
	Password  string  `json:"$password"`
	CreatedAt string  `json:"created_at"`
	ExpiresAt *string `json:"expires_at,omitempty"`
	Id        string  `json:"id"`
	UserId    *string `json:"user_id,omitempty"`
}

// NewTypesUserDatabasePassword instantiates a new TypesUserDatabasePassword object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTypesUserDatabasePassword(password string, createdAt string, id string) *TypesUserDatabasePassword {
	this := TypesUserDatabasePassword{}
	this.Password = password
	this.CreatedAt = createdAt
	this.Id = id
	return &this
}

// NewTypesUserDatabasePasswordWithDefaults instantiates a new TypesUserDatabasePassword object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTypesUserDatabasePasswordWithDefaults() *TypesUserDatabasePassword {
	this := TypesUserDatabasePassword{}
	return &this
}

// GetPassword returns the Password field value
func (o *TypesUserDatabasePassword) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *TypesUserDatabasePassword) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *TypesUserDatabasePassword) SetPassword(v string) {
	o.Password = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *TypesUserDatabasePassword) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *TypesUserDatabasePassword) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *TypesUserDatabasePassword) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetExpiresAt returns the ExpiresAt field value if set, zero value otherwise.
func (o *TypesUserDatabasePassword) GetExpiresAt() string {
	if o == nil || o.ExpiresAt == nil {
		var ret string
		return ret
	}
	return *o.ExpiresAt
}

// GetExpiresAtOk returns a tuple with the ExpiresAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesUserDatabasePassword) GetExpiresAtOk() (*string, bool) {
	if o == nil || o.ExpiresAt == nil {
		return nil, false
	}
	return o.ExpiresAt, true
}

// HasExpiresAt returns a boolean if a field has been set.
func (o *TypesUserDatabasePassword) HasExpiresAt() bool {
	if o != nil && o.ExpiresAt != nil {
		return true
	}

	return false
}

// SetExpiresAt gets a reference to the given string and assigns it to the ExpiresAt field.
func (o *TypesUserDatabasePassword) SetExpiresAt(v string) {
	o.ExpiresAt = &v
}

// GetId returns the Id field value
func (o *TypesUserDatabasePassword) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TypesUserDatabasePassword) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TypesUserDatabasePassword) SetId(v string) {
	o.Id = v
}

// GetUserId returns the UserId field value if set, zero value otherwise.
func (o *TypesUserDatabasePassword) GetUserId() string {
	if o == nil || o.UserId == nil {
		var ret string
		return ret
	}
	return *o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesUserDatabasePassword) GetUserIdOk() (*string, bool) {
	if o == nil || o.UserId == nil {
		return nil, false
	}
	return o.UserId, true
}

// HasUserId returns a boolean if a field has been set.
func (o *TypesUserDatabasePassword) HasUserId() bool {
	if o != nil && o.UserId != nil {
		return true
	}

	return false
}

// SetUserId gets a reference to the given string and assigns it to the UserId field.
func (o *TypesUserDatabasePassword) SetUserId(v string) {
	o.UserId = &v
}

func (o TypesUserDatabasePassword) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["$password"] = o.Password
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.ExpiresAt != nil {
		toSerialize["expires_at"] = o.ExpiresAt
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.UserId != nil {
		toSerialize["user_id"] = o.UserId
	}
	return json.Marshal(toSerialize)
}

type NullableTypesUserDatabasePassword struct {
	value *TypesUserDatabasePassword
	isSet bool
}

func (v NullableTypesUserDatabasePassword) Get() *TypesUserDatabasePassword {
	return v.value
}

func (v *NullableTypesUserDatabasePassword) Set(val *TypesUserDatabasePassword) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesUserDatabasePassword) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesUserDatabasePassword) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesUserDatabasePassword(val *TypesUserDatabasePassword) *NullableTypesUserDatabasePassword {
	return &NullableTypesUserDatabasePassword{value: val, isSet: true}
}

func (v NullableTypesUserDatabasePassword) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesUserDatabasePassword) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
