/*
Steampipe Cloud

Steampipe Cloud is a hosted version of Steampipe (https://steampipe.io), an open source tool to instantly query your cloud services (e.g. AWS, Azure, GCP and more) with SQL. No DB required.

API version: 1.0
Contact: help@steampipe.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package steampipecloud

import (
	"encoding/json"
)

// SearchIdentitiesResponse struct for SearchIdentitiesResponse
type SearchIdentitiesResponse struct {
	Items *[]IdentitySearch `json:"items,omitempty"`
}

// NewSearchIdentitiesResponse instantiates a new SearchIdentitiesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchIdentitiesResponse() *SearchIdentitiesResponse {
	this := SearchIdentitiesResponse{}
	return &this
}

// NewSearchIdentitiesResponseWithDefaults instantiates a new SearchIdentitiesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchIdentitiesResponseWithDefaults() *SearchIdentitiesResponse {
	this := SearchIdentitiesResponse{}
	return &this
}

// GetItems returns the Items field value if set, zero value otherwise.
func (o *SearchIdentitiesResponse) GetItems() []IdentitySearch {
	if o == nil || o.Items == nil {
		var ret []IdentitySearch
		return ret
	}
	return *o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SearchIdentitiesResponse) GetItemsOk() (*[]IdentitySearch, bool) {
	if o == nil || o.Items == nil {
		return nil, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *SearchIdentitiesResponse) HasItems() bool {
	if o != nil && o.Items != nil {
		return true
	}

	return false
}

// SetItems gets a reference to the given []IdentitySearch and assigns it to the Items field.
func (o *SearchIdentitiesResponse) SetItems(v []IdentitySearch) {
	o.Items = &v
}

func (o SearchIdentitiesResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	return json.Marshal(toSerialize)
}

type NullableSearchIdentitiesResponse struct {
	value *SearchIdentitiesResponse
	isSet bool
}

func (v NullableSearchIdentitiesResponse) Get() *SearchIdentitiesResponse {
	return v.value
}

func (v *NullableSearchIdentitiesResponse) Set(val *SearchIdentitiesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchIdentitiesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchIdentitiesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchIdentitiesResponse(val *SearchIdentitiesResponse) *NullableSearchIdentitiesResponse {
	return &NullableSearchIdentitiesResponse{value: val, isSet: true}
}

func (v NullableSearchIdentitiesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchIdentitiesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
