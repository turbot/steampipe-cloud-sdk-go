/*
Steampipe Cloud

Interrogate your CloudOps data with the simplicity and power of SQL, then share your discoveries using Steampipe Cloud.

API version: 1.0
Contact: help@steampipe.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package steampipecloud

import (
	"encoding/json"
)

// TypesUserOrg struct for TypesUserOrg
type TypesUserOrg struct {
	CreatedAt string    `json:"created_at"`
	Id        string    `json:"id"`
	Org       *TypesOrg `json:"org,omitempty"`
	OrgId     string    `json:"org_id"`
	Role      string    `json:"role"`
	Status    string    `json:"status"`
	UpdatedAt *string   `json:"updated_at,omitempty"`
	UserId    string    `json:"user_id"`
	VersionId *int32    `json:"version_id,omitempty"`
}

// NewTypesUserOrg instantiates a new TypesUserOrg object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTypesUserOrg(createdAt string, id string, orgId string, role string, status string, userId string) *TypesUserOrg {
	this := TypesUserOrg{}
	this.CreatedAt = createdAt
	this.Id = id
	this.OrgId = orgId
	this.Role = role
	this.Status = status
	this.UserId = userId
	return &this
}

// NewTypesUserOrgWithDefaults instantiates a new TypesUserOrg object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTypesUserOrgWithDefaults() *TypesUserOrg {
	this := TypesUserOrg{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value
func (o *TypesUserOrg) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *TypesUserOrg) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *TypesUserOrg) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetId returns the Id field value
func (o *TypesUserOrg) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TypesUserOrg) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TypesUserOrg) SetId(v string) {
	o.Id = v
}

// GetOrg returns the Org field value if set, zero value otherwise.
func (o *TypesUserOrg) GetOrg() TypesOrg {
	if o == nil || o.Org == nil {
		var ret TypesOrg
		return ret
	}
	return *o.Org
}

// GetOrgOk returns a tuple with the Org field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesUserOrg) GetOrgOk() (*TypesOrg, bool) {
	if o == nil || o.Org == nil {
		return nil, false
	}
	return o.Org, true
}

// HasOrg returns a boolean if a field has been set.
func (o *TypesUserOrg) HasOrg() bool {
	if o != nil && o.Org != nil {
		return true
	}

	return false
}

// SetOrg gets a reference to the given TypesOrg and assigns it to the Org field.
func (o *TypesUserOrg) SetOrg(v TypesOrg) {
	o.Org = &v
}

// GetOrgId returns the OrgId field value
func (o *TypesUserOrg) GetOrgId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrgId
}

// GetOrgIdOk returns a tuple with the OrgId field value
// and a boolean to check if the value has been set.
func (o *TypesUserOrg) GetOrgIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrgId, true
}

// SetOrgId sets field value
func (o *TypesUserOrg) SetOrgId(v string) {
	o.OrgId = v
}

// GetRole returns the Role field value
func (o *TypesUserOrg) GetRole() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Role
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
func (o *TypesUserOrg) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Role, true
}

// SetRole sets field value
func (o *TypesUserOrg) SetRole(v string) {
	o.Role = v
}

// GetStatus returns the Status field value
func (o *TypesUserOrg) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *TypesUserOrg) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *TypesUserOrg) SetStatus(v string) {
	o.Status = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *TypesUserOrg) GetUpdatedAt() string {
	if o == nil || o.UpdatedAt == nil {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesUserOrg) GetUpdatedAtOk() (*string, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *TypesUserOrg) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *TypesUserOrg) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetUserId returns the UserId field value
func (o *TypesUserOrg) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *TypesUserOrg) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *TypesUserOrg) SetUserId(v string) {
	o.UserId = v
}

// GetVersionId returns the VersionId field value if set, zero value otherwise.
func (o *TypesUserOrg) GetVersionId() int32 {
	if o == nil || o.VersionId == nil {
		var ret int32
		return ret
	}
	return *o.VersionId
}

// GetVersionIdOk returns a tuple with the VersionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesUserOrg) GetVersionIdOk() (*int32, bool) {
	if o == nil || o.VersionId == nil {
		return nil, false
	}
	return o.VersionId, true
}

// HasVersionId returns a boolean if a field has been set.
func (o *TypesUserOrg) HasVersionId() bool {
	if o != nil && o.VersionId != nil {
		return true
	}

	return false
}

// SetVersionId gets a reference to the given int32 and assigns it to the VersionId field.
func (o *TypesUserOrg) SetVersionId(v int32) {
	o.VersionId = &v
}

func (o TypesUserOrg) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.Org != nil {
		toSerialize["org"] = o.Org
	}
	if true {
		toSerialize["org_id"] = o.OrgId
	}
	if true {
		toSerialize["role"] = o.Role
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if true {
		toSerialize["user_id"] = o.UserId
	}
	if o.VersionId != nil {
		toSerialize["version_id"] = o.VersionId
	}
	return json.Marshal(toSerialize)
}

type NullableTypesUserOrg struct {
	value *TypesUserOrg
	isSet bool
}

func (v NullableTypesUserOrg) Get() *TypesUserOrg {
	return v.value
}

func (v *NullableTypesUserOrg) Set(val *TypesUserOrg) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesUserOrg) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesUserOrg) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesUserOrg(val *TypesUserOrg) *NullableTypesUserOrg {
	return &NullableTypesUserOrg{value: val, isSet: true}
}

func (v NullableTypesUserOrg) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesUserOrg) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
