/*
Steampipe Cloud

Steampipe Cloud is a hosted version of Steampipe (https://steampipe.io), an open source tool to instantly query your cloud services (e.g. AWS, Azure, GCP and more) with SQL. No DB required.

API version: {{OPEN_API_VERSION}}
Contact: help@steampipe.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package steampipecloud

import (
	"encoding/json"
)

// BillingInfo struct for BillingInfo
type BillingInfo struct {
	// The time when a subscription will be cancelled in stripe.
	DeleteAt *string `json:"delete_at,omitempty"`
	// The time when the org will be suspended due to failed billing in ISO 8601 UTC.
	DisableAt *string `json:"disable_at,omitempty"`
	// The billing status for the org in stripe i.e. whether its pending verification or verified.
	Status string `json:"status"`
}

// NewBillingInfo instantiates a new BillingInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBillingInfo(status string) *BillingInfo {
	this := BillingInfo{}
	this.Status = status
	return &this
}

// NewBillingInfoWithDefaults instantiates a new BillingInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBillingInfoWithDefaults() *BillingInfo {
	this := BillingInfo{}
	return &this
}

// GetDeleteAt returns the DeleteAt field value if set, zero value otherwise.
func (o *BillingInfo) GetDeleteAt() string {
	if o == nil || o.DeleteAt == nil {
		var ret string
		return ret
	}
	return *o.DeleteAt
}

// GetDeleteAtOk returns a tuple with the DeleteAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingInfo) GetDeleteAtOk() (*string, bool) {
	if o == nil || o.DeleteAt == nil {
		return nil, false
	}
	return o.DeleteAt, true
}

// HasDeleteAt returns a boolean if a field has been set.
func (o *BillingInfo) HasDeleteAt() bool {
	if o != nil && o.DeleteAt != nil {
		return true
	}

	return false
}

// SetDeleteAt gets a reference to the given string and assigns it to the DeleteAt field.
func (o *BillingInfo) SetDeleteAt(v string) {
	o.DeleteAt = &v
}

// GetDisableAt returns the DisableAt field value if set, zero value otherwise.
func (o *BillingInfo) GetDisableAt() string {
	if o == nil || o.DisableAt == nil {
		var ret string
		return ret
	}
	return *o.DisableAt
}

// GetDisableAtOk returns a tuple with the DisableAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BillingInfo) GetDisableAtOk() (*string, bool) {
	if o == nil || o.DisableAt == nil {
		return nil, false
	}
	return o.DisableAt, true
}

// HasDisableAt returns a boolean if a field has been set.
func (o *BillingInfo) HasDisableAt() bool {
	if o != nil && o.DisableAt != nil {
		return true
	}

	return false
}

// SetDisableAt gets a reference to the given string and assigns it to the DisableAt field.
func (o *BillingInfo) SetDisableAt(v string) {
	o.DisableAt = &v
}

// GetStatus returns the Status field value
func (o *BillingInfo) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *BillingInfo) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *BillingInfo) SetStatus(v string) {
	o.Status = v
}

func (o BillingInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DeleteAt != nil {
		toSerialize["delete_at"] = o.DeleteAt
	}
	if o.DisableAt != nil {
		toSerialize["disable_at"] = o.DisableAt
	}
	if true {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableBillingInfo struct {
	value *BillingInfo
	isSet bool
}

func (v NullableBillingInfo) Get() *BillingInfo {
	return v.value
}

func (v *NullableBillingInfo) Set(val *BillingInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBillingInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBillingInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBillingInfo(val *BillingInfo) *NullableBillingInfo {
	return &NullableBillingInfo{value: val, isSet: true}
}

func (v NullableBillingInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBillingInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
