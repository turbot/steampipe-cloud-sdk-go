/*
Steampipe Cloud

Interrogate your CloudOps data with the simplicity and power of SQL, then share your discoveries using Steampipe Cloud.

API version: 1.0
Contact: help@steampipe.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package steampipecloud

import (
	"encoding/json"
)

// TypesQuota struct for TypesQuota
type TypesQuota struct {
	Available *int32 `json:"available,omitempty"`
	Limit     *int32 `json:"limit,omitempty"`
	Used      *int32 `json:"used,omitempty"`
}

// NewTypesQuota instantiates a new TypesQuota object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTypesQuota() *TypesQuota {
	this := TypesQuota{}
	return &this
}

// NewTypesQuotaWithDefaults instantiates a new TypesQuota object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTypesQuotaWithDefaults() *TypesQuota {
	this := TypesQuota{}
	return &this
}

// GetAvailable returns the Available field value if set, zero value otherwise.
func (o *TypesQuota) GetAvailable() int32 {
	if o == nil || o.Available == nil {
		var ret int32
		return ret
	}
	return *o.Available
}

// GetAvailableOk returns a tuple with the Available field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesQuota) GetAvailableOk() (*int32, bool) {
	if o == nil || o.Available == nil {
		return nil, false
	}
	return o.Available, true
}

// HasAvailable returns a boolean if a field has been set.
func (o *TypesQuota) HasAvailable() bool {
	if o != nil && o.Available != nil {
		return true
	}

	return false
}

// SetAvailable gets a reference to the given int32 and assigns it to the Available field.
func (o *TypesQuota) SetAvailable(v int32) {
	o.Available = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *TypesQuota) GetLimit() int32 {
	if o == nil || o.Limit == nil {
		var ret int32
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesQuota) GetLimitOk() (*int32, bool) {
	if o == nil || o.Limit == nil {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *TypesQuota) HasLimit() bool {
	if o != nil && o.Limit != nil {
		return true
	}

	return false
}

// SetLimit gets a reference to the given int32 and assigns it to the Limit field.
func (o *TypesQuota) SetLimit(v int32) {
	o.Limit = &v
}

// GetUsed returns the Used field value if set, zero value otherwise.
func (o *TypesQuota) GetUsed() int32 {
	if o == nil || o.Used == nil {
		var ret int32
		return ret
	}
	return *o.Used
}

// GetUsedOk returns a tuple with the Used field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesQuota) GetUsedOk() (*int32, bool) {
	if o == nil || o.Used == nil {
		return nil, false
	}
	return o.Used, true
}

// HasUsed returns a boolean if a field has been set.
func (o *TypesQuota) HasUsed() bool {
	if o != nil && o.Used != nil {
		return true
	}

	return false
}

// SetUsed gets a reference to the given int32 and assigns it to the Used field.
func (o *TypesQuota) SetUsed(v int32) {
	o.Used = &v
}

func (o TypesQuota) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Available != nil {
		toSerialize["available"] = o.Available
	}
	if o.Limit != nil {
		toSerialize["limit"] = o.Limit
	}
	if o.Used != nil {
		toSerialize["used"] = o.Used
	}
	return json.Marshal(toSerialize)
}

type NullableTypesQuota struct {
	value *TypesQuota
	isSet bool
}

func (v NullableTypesQuota) Get() *TypesQuota {
	return v.value
}

func (v *NullableTypesQuota) Set(val *TypesQuota) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesQuota) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesQuota) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesQuota(val *TypesQuota) *NullableTypesQuota {
	return &NullableTypesQuota{value: val, isSet: true}
}

func (v NullableTypesQuota) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesQuota) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
