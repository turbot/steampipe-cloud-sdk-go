/*
Steampipe Cloud

Steampipe Cloud is a hosted version of Steampipe (https://steampipe.io), an open source tool to instantly query your cloud services (e.g. AWS, Azure, GCP and more) with SQL. No DB required.

API version: 1.0
Contact: help@steampipe.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package steampipecloud

import (
	"encoding/json"
)

// NotificationRuleEvent struct for NotificationRuleEvent
type NotificationRuleEvent struct {
	Event              string `json:"event"`
	Id                 string `json:"id"`
	NotificationRuleId string `json:"notification_rule_id"`
}

// NewNotificationRuleEvent instantiates a new NotificationRuleEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationRuleEvent(event string, id string, notificationRuleId string) *NotificationRuleEvent {
	this := NotificationRuleEvent{}
	this.Event = event
	this.Id = id
	this.NotificationRuleId = notificationRuleId
	return &this
}

// NewNotificationRuleEventWithDefaults instantiates a new NotificationRuleEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationRuleEventWithDefaults() *NotificationRuleEvent {
	this := NotificationRuleEvent{}
	return &this
}

// GetEvent returns the Event field value
func (o *NotificationRuleEvent) GetEvent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Event
}

// GetEventOk returns a tuple with the Event field value
// and a boolean to check if the value has been set.
func (o *NotificationRuleEvent) GetEventOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Event, true
}

// SetEvent sets field value
func (o *NotificationRuleEvent) SetEvent(v string) {
	o.Event = v
}

// GetId returns the Id field value
func (o *NotificationRuleEvent) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NotificationRuleEvent) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NotificationRuleEvent) SetId(v string) {
	o.Id = v
}

// GetNotificationRuleId returns the NotificationRuleId field value
func (o *NotificationRuleEvent) GetNotificationRuleId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NotificationRuleId
}

// GetNotificationRuleIdOk returns a tuple with the NotificationRuleId field value
// and a boolean to check if the value has been set.
func (o *NotificationRuleEvent) GetNotificationRuleIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NotificationRuleId, true
}

// SetNotificationRuleId sets field value
func (o *NotificationRuleEvent) SetNotificationRuleId(v string) {
	o.NotificationRuleId = v
}

func (o NotificationRuleEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["event"] = o.Event
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["notification_rule_id"] = o.NotificationRuleId
	}
	return json.Marshal(toSerialize)
}

type NullableNotificationRuleEvent struct {
	value *NotificationRuleEvent
	isSet bool
}

func (v NullableNotificationRuleEvent) Get() *NotificationRuleEvent {
	return v.value
}

func (v *NullableNotificationRuleEvent) Set(val *NotificationRuleEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationRuleEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationRuleEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationRuleEvent(val *NotificationRuleEvent) *NullableNotificationRuleEvent {
	return &NullableNotificationRuleEvent{value: val, isSet: true}
}

func (v NullableNotificationRuleEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationRuleEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
