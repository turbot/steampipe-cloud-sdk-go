/*
Steampipe Cloud

Steampipe Cloud is a hosted version of Steampipe (https://steampipe.io), an open source tool to instantly query your cloud services (e.g. AWS, Azure, GCP and more) with SQL. No DB required.

API version: {{OPEN_API_VERSION}}
Contact: help@steampipe.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package steampipecloud

import (
	"encoding/json"
)

// UpdateConnectionRequest struct for UpdateConnectionRequest
type UpdateConnectionRequest struct {
	Config *map[string]interface{} `json:"config,omitempty"`
	Handle *string                 `json:"handle,omitempty"`
}

// NewUpdateConnectionRequest instantiates a new UpdateConnectionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateConnectionRequest() *UpdateConnectionRequest {
	this := UpdateConnectionRequest{}
	return &this
}

// NewUpdateConnectionRequestWithDefaults instantiates a new UpdateConnectionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateConnectionRequestWithDefaults() *UpdateConnectionRequest {
	this := UpdateConnectionRequest{}
	return &this
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *UpdateConnectionRequest) GetConfig() map[string]interface{} {
	if o == nil || o.Config == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateConnectionRequest) GetConfigOk() (*map[string]interface{}, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *UpdateConnectionRequest) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given map[string]interface{} and assigns it to the Config field.
func (o *UpdateConnectionRequest) SetConfig(v map[string]interface{}) {
	o.Config = &v
}

// GetHandle returns the Handle field value if set, zero value otherwise.
func (o *UpdateConnectionRequest) GetHandle() string {
	if o == nil || o.Handle == nil {
		var ret string
		return ret
	}
	return *o.Handle
}

// GetHandleOk returns a tuple with the Handle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateConnectionRequest) GetHandleOk() (*string, bool) {
	if o == nil || o.Handle == nil {
		return nil, false
	}
	return o.Handle, true
}

// HasHandle returns a boolean if a field has been set.
func (o *UpdateConnectionRequest) HasHandle() bool {
	if o != nil && o.Handle != nil {
		return true
	}

	return false
}

// SetHandle gets a reference to the given string and assigns it to the Handle field.
func (o *UpdateConnectionRequest) SetHandle(v string) {
	o.Handle = &v
}

func (o UpdateConnectionRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	if o.Handle != nil {
		toSerialize["handle"] = o.Handle
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateConnectionRequest struct {
	value *UpdateConnectionRequest
	isSet bool
}

func (v NullableUpdateConnectionRequest) Get() *UpdateConnectionRequest {
	return v.value
}

func (v *NullableUpdateConnectionRequest) Set(val *UpdateConnectionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateConnectionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateConnectionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateConnectionRequest(val *UpdateConnectionRequest) *NullableUpdateConnectionRequest {
	return &NullableUpdateConnectionRequest{value: val, isSet: true}
}

func (v NullableUpdateConnectionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateConnectionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
