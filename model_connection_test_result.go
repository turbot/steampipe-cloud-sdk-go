/*
Steampipe Cloud

Steampipe Cloud is a hosted version of Steampipe (https://steampipe.io), an open source tool to instantly query your cloud services (e.g. AWS, Azure, GCP and more) with SQL. No DB required.

API version: 1.0
Contact: help@steampipe.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package steampipecloud

import (
	"encoding/json"
)

// ConnectionTestResult struct for ConnectionTestResult
type ConnectionTestResult struct {
	Reason *string `json:"reason,omitempty"`
	Status *string `json:"status,omitempty"`
}

// NewConnectionTestResult instantiates a new ConnectionTestResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectionTestResult() *ConnectionTestResult {
	this := ConnectionTestResult{}
	return &this
}

// NewConnectionTestResultWithDefaults instantiates a new ConnectionTestResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectionTestResultWithDefaults() *ConnectionTestResult {
	this := ConnectionTestResult{}
	return &this
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *ConnectionTestResult) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionTestResult) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *ConnectionTestResult) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *ConnectionTestResult) SetReason(v string) {
	o.Reason = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ConnectionTestResult) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectionTestResult) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ConnectionTestResult) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ConnectionTestResult) SetStatus(v string) {
	o.Status = &v
}

func (o ConnectionTestResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	return json.Marshal(toSerialize)
}

type NullableConnectionTestResult struct {
	value *ConnectionTestResult
	isSet bool
}

func (v NullableConnectionTestResult) Get() *ConnectionTestResult {
	return v.value
}

func (v *NullableConnectionTestResult) Set(val *ConnectionTestResult) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectionTestResult) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectionTestResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectionTestResult(val *ConnectionTestResult) *NullableConnectionTestResult {
	return &NullableConnectionTestResult{value: val, isSet: true}
}

func (v NullableConnectionTestResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectionTestResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
