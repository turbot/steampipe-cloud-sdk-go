/*
Steampipe Cloud

Interrogate your CloudOps data with the simplicity and power of SQL, then share your discoveries using Steampipe Cloud.

API version: 1.0
Contact: help@steampipe.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package steampipecloud

import (
	"encoding/json"
)

// TypesConnectionTestRow struct for TypesConnectionTestRow
type TypesConnectionTestRow struct {
	Id     *string `json:"id,omitempty"`
	Reason *string `json:"reason,omitempty"`
	Status *string `json:"status,omitempty"`
	Test   *string `json:"test,omitempty"`
}

// NewTypesConnectionTestRow instantiates a new TypesConnectionTestRow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTypesConnectionTestRow() *TypesConnectionTestRow {
	this := TypesConnectionTestRow{}
	return &this
}

// NewTypesConnectionTestRowWithDefaults instantiates a new TypesConnectionTestRow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTypesConnectionTestRowWithDefaults() *TypesConnectionTestRow {
	this := TypesConnectionTestRow{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *TypesConnectionTestRow) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesConnectionTestRow) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *TypesConnectionTestRow) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *TypesConnectionTestRow) SetId(v string) {
	o.Id = &v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *TypesConnectionTestRow) GetReason() string {
	if o == nil || o.Reason == nil {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesConnectionTestRow) GetReasonOk() (*string, bool) {
	if o == nil || o.Reason == nil {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *TypesConnectionTestRow) HasReason() bool {
	if o != nil && o.Reason != nil {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *TypesConnectionTestRow) SetReason(v string) {
	o.Reason = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *TypesConnectionTestRow) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesConnectionTestRow) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *TypesConnectionTestRow) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *TypesConnectionTestRow) SetStatus(v string) {
	o.Status = &v
}

// GetTest returns the Test field value if set, zero value otherwise.
func (o *TypesConnectionTestRow) GetTest() string {
	if o == nil || o.Test == nil {
		var ret string
		return ret
	}
	return *o.Test
}

// GetTestOk returns a tuple with the Test field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypesConnectionTestRow) GetTestOk() (*string, bool) {
	if o == nil || o.Test == nil {
		return nil, false
	}
	return o.Test, true
}

// HasTest returns a boolean if a field has been set.
func (o *TypesConnectionTestRow) HasTest() bool {
	if o != nil && o.Test != nil {
		return true
	}

	return false
}

// SetTest gets a reference to the given string and assigns it to the Test field.
func (o *TypesConnectionTestRow) SetTest(v string) {
	o.Test = &v
}

func (o TypesConnectionTestRow) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Reason != nil {
		toSerialize["reason"] = o.Reason
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Test != nil {
		toSerialize["test"] = o.Test
	}
	return json.Marshal(toSerialize)
}

type NullableTypesConnectionTestRow struct {
	value *TypesConnectionTestRow
	isSet bool
}

func (v NullableTypesConnectionTestRow) Get() *TypesConnectionTestRow {
	return v.value
}

func (v *NullableTypesConnectionTestRow) Set(val *TypesConnectionTestRow) {
	v.value = val
	v.isSet = true
}

func (v NullableTypesConnectionTestRow) IsSet() bool {
	return v.isSet
}

func (v *NullableTypesConnectionTestRow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypesConnectionTestRow(val *TypesConnectionTestRow) *NullableTypesConnectionTestRow {
	return &NullableTypesConnectionTestRow{value: val, isSet: true}
}

func (v NullableTypesConnectionTestRow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypesConnectionTestRow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
