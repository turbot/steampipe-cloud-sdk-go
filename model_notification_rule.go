/*
Steampipe Cloud

Steampipe Cloud is a hosted version of Steampipe (https://steampipe.io), an open source tool to instantly query your cloud services (e.g. AWS, Azure, GCP and more) with SQL. No DB required.

API version: 1.0
Contact: help@steampipe.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package steampipecloud

import (
	"encoding/json"
)

// NotificationRule struct for NotificationRule
type NotificationRule struct {
	ActorId       string                       `json:"actor_id"`
	CreatedAt     string                       `json:"created_at"`
	Events        *[]NotificationRuleEvent     `json:"events,omitempty"`
	Id            string                       `json:"id"`
	IdentityId    *string                      `json:"identity_id,omitempty"`
	RecipientType string                       `json:"recipient_type"`
	Recipients    *[]NotificationRuleRecipient `json:"recipients,omitempty"`
	TargetId      *string                      `json:"target_id,omitempty"`
	Title         string                       `json:"title"`
	UpdatedAt     *string                      `json:"updated_at,omitempty"`
}

// NewNotificationRule instantiates a new NotificationRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationRule(actorId string, createdAt string, id string, recipientType string, title string) *NotificationRule {
	this := NotificationRule{}
	this.ActorId = actorId
	this.CreatedAt = createdAt
	this.Id = id
	this.RecipientType = recipientType
	this.Title = title
	return &this
}

// NewNotificationRuleWithDefaults instantiates a new NotificationRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationRuleWithDefaults() *NotificationRule {
	this := NotificationRule{}
	return &this
}

// GetActorId returns the ActorId field value
func (o *NotificationRule) GetActorId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ActorId
}

// GetActorIdOk returns a tuple with the ActorId field value
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetActorIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ActorId, true
}

// SetActorId sets field value
func (o *NotificationRule) SetActorId(v string) {
	o.ActorId = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *NotificationRule) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *NotificationRule) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *NotificationRule) GetEvents() []NotificationRuleEvent {
	if o == nil || o.Events == nil {
		var ret []NotificationRuleEvent
		return ret
	}
	return *o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetEventsOk() (*[]NotificationRuleEvent, bool) {
	if o == nil || o.Events == nil {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *NotificationRule) HasEvents() bool {
	if o != nil && o.Events != nil {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []NotificationRuleEvent and assigns it to the Events field.
func (o *NotificationRule) SetEvents(v []NotificationRuleEvent) {
	o.Events = &v
}

// GetId returns the Id field value
func (o *NotificationRule) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *NotificationRule) SetId(v string) {
	o.Id = v
}

// GetIdentityId returns the IdentityId field value if set, zero value otherwise.
func (o *NotificationRule) GetIdentityId() string {
	if o == nil || o.IdentityId == nil {
		var ret string
		return ret
	}
	return *o.IdentityId
}

// GetIdentityIdOk returns a tuple with the IdentityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetIdentityIdOk() (*string, bool) {
	if o == nil || o.IdentityId == nil {
		return nil, false
	}
	return o.IdentityId, true
}

// HasIdentityId returns a boolean if a field has been set.
func (o *NotificationRule) HasIdentityId() bool {
	if o != nil && o.IdentityId != nil {
		return true
	}

	return false
}

// SetIdentityId gets a reference to the given string and assigns it to the IdentityId field.
func (o *NotificationRule) SetIdentityId(v string) {
	o.IdentityId = &v
}

// GetRecipientType returns the RecipientType field value
func (o *NotificationRule) GetRecipientType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RecipientType
}

// GetRecipientTypeOk returns a tuple with the RecipientType field value
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetRecipientTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecipientType, true
}

// SetRecipientType sets field value
func (o *NotificationRule) SetRecipientType(v string) {
	o.RecipientType = v
}

// GetRecipients returns the Recipients field value if set, zero value otherwise.
func (o *NotificationRule) GetRecipients() []NotificationRuleRecipient {
	if o == nil || o.Recipients == nil {
		var ret []NotificationRuleRecipient
		return ret
	}
	return *o.Recipients
}

// GetRecipientsOk returns a tuple with the Recipients field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetRecipientsOk() (*[]NotificationRuleRecipient, bool) {
	if o == nil || o.Recipients == nil {
		return nil, false
	}
	return o.Recipients, true
}

// HasRecipients returns a boolean if a field has been set.
func (o *NotificationRule) HasRecipients() bool {
	if o != nil && o.Recipients != nil {
		return true
	}

	return false
}

// SetRecipients gets a reference to the given []NotificationRuleRecipient and assigns it to the Recipients field.
func (o *NotificationRule) SetRecipients(v []NotificationRuleRecipient) {
	o.Recipients = &v
}

// GetTargetId returns the TargetId field value if set, zero value otherwise.
func (o *NotificationRule) GetTargetId() string {
	if o == nil || o.TargetId == nil {
		var ret string
		return ret
	}
	return *o.TargetId
}

// GetTargetIdOk returns a tuple with the TargetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetTargetIdOk() (*string, bool) {
	if o == nil || o.TargetId == nil {
		return nil, false
	}
	return o.TargetId, true
}

// HasTargetId returns a boolean if a field has been set.
func (o *NotificationRule) HasTargetId() bool {
	if o != nil && o.TargetId != nil {
		return true
	}

	return false
}

// SetTargetId gets a reference to the given string and assigns it to the TargetId field.
func (o *NotificationRule) SetTargetId(v string) {
	o.TargetId = &v
}

// GetTitle returns the Title field value
func (o *NotificationRule) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *NotificationRule) SetTitle(v string) {
	o.Title = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *NotificationRule) GetUpdatedAt() string {
	if o == nil || o.UpdatedAt == nil {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NotificationRule) GetUpdatedAtOk() (*string, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *NotificationRule) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *NotificationRule) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

func (o NotificationRule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["actor_id"] = o.ActorId
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.Events != nil {
		toSerialize["events"] = o.Events
	}
	if true {
		toSerialize["id"] = o.Id
	}
	if o.IdentityId != nil {
		toSerialize["identity_id"] = o.IdentityId
	}
	if true {
		toSerialize["recipient_type"] = o.RecipientType
	}
	if o.Recipients != nil {
		toSerialize["recipients"] = o.Recipients
	}
	if o.TargetId != nil {
		toSerialize["target_id"] = o.TargetId
	}
	if true {
		toSerialize["title"] = o.Title
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableNotificationRule struct {
	value *NotificationRule
	isSet bool
}

func (v NullableNotificationRule) Get() *NotificationRule {
	return v.value
}

func (v *NullableNotificationRule) Set(val *NotificationRule) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationRule) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationRule(val *NotificationRule) *NullableNotificationRule {
	return &NullableNotificationRule{value: val, isSet: true}
}

func (v NullableNotificationRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
