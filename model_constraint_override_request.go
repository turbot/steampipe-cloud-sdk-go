/*
Steampipe Cloud

Steampipe Cloud is a hosted version of Steampipe (https://steampipe.io), an open source tool to instantly query your cloud services (e.g. AWS, Azure, GCP and more) with SQL. No DB required.

API version: {{OPEN_API_VERSION}}
Contact: help@steampipe.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package steampipecloud

import (
	"encoding/json"
)

// ConstraintOverrideRequest struct for ConstraintOverrideRequest
type ConstraintOverrideRequest struct {
	Setting interface{} `json:"setting,omitempty"`
}

// NewConstraintOverrideRequest instantiates a new ConstraintOverrideRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConstraintOverrideRequest() *ConstraintOverrideRequest {
	this := ConstraintOverrideRequest{}
	return &this
}

// NewConstraintOverrideRequestWithDefaults instantiates a new ConstraintOverrideRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConstraintOverrideRequestWithDefaults() *ConstraintOverrideRequest {
	this := ConstraintOverrideRequest{}
	return &this
}

// GetSetting returns the Setting field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConstraintOverrideRequest) GetSetting() interface{} {
	if o == nil {
		var ret interface{}
		return ret
	}
	return o.Setting
}

// GetSettingOk returns a tuple with the Setting field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConstraintOverrideRequest) GetSettingOk() (*interface{}, bool) {
	if o == nil || o.Setting == nil {
		return nil, false
	}
	return &o.Setting, true
}

// HasSetting returns a boolean if a field has been set.
func (o *ConstraintOverrideRequest) HasSetting() bool {
	if o != nil && o.Setting != nil {
		return true
	}

	return false
}

// SetSetting gets a reference to the given interface{} and assigns it to the Setting field.
func (o *ConstraintOverrideRequest) SetSetting(v interface{}) {
	o.Setting = v
}

func (o ConstraintOverrideRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Setting != nil {
		toSerialize["setting"] = o.Setting
	}
	return json.Marshal(toSerialize)
}

type NullableConstraintOverrideRequest struct {
	value *ConstraintOverrideRequest
	isSet bool
}

func (v NullableConstraintOverrideRequest) Get() *ConstraintOverrideRequest {
	return v.value
}

func (v *NullableConstraintOverrideRequest) Set(val *ConstraintOverrideRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableConstraintOverrideRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableConstraintOverrideRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConstraintOverrideRequest(val *ConstraintOverrideRequest) *NullableConstraintOverrideRequest {
	return &NullableConstraintOverrideRequest{value: val, isSet: true}
}

func (v NullableConstraintOverrideRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConstraintOverrideRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
