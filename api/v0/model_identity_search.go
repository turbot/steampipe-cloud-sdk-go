/*
Steampipe Cloud

Interrogate your CloudOps data with the simplicity and power of SQL, then share your discoveries using Steampipe Cloud.

API version: 1.0
Contact: help@steampipe.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package steampipecloud

import (
	"encoding/json"
)

// IdentitySearch struct for IdentitySearch
type IdentitySearch struct {
	AvatarUrl   *string `json:"avatar_url,omitempty"`
	DisplayName *string `json:"display_name,omitempty"`
	Handle      string  `json:"handle"`
	Id          string  `json:"id"`
}

// NewIdentitySearch instantiates a new IdentitySearch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentitySearch(handle string, id string) *IdentitySearch {
	this := IdentitySearch{}
	this.Handle = handle
	this.Id = id
	return &this
}

// NewIdentitySearchWithDefaults instantiates a new IdentitySearch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentitySearchWithDefaults() *IdentitySearch {
	this := IdentitySearch{}
	return &this
}

// GetAvatarUrl returns the AvatarUrl field value if set, zero value otherwise.
func (o *IdentitySearch) GetAvatarUrl() string {
	if o == nil || o.AvatarUrl == nil {
		var ret string
		return ret
	}
	return *o.AvatarUrl
}

// GetAvatarUrlOk returns a tuple with the AvatarUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentitySearch) GetAvatarUrlOk() (*string, bool) {
	if o == nil || o.AvatarUrl == nil {
		return nil, false
	}
	return o.AvatarUrl, true
}

// HasAvatarUrl returns a boolean if a field has been set.
func (o *IdentitySearch) HasAvatarUrl() bool {
	if o != nil && o.AvatarUrl != nil {
		return true
	}

	return false
}

// SetAvatarUrl gets a reference to the given string and assigns it to the AvatarUrl field.
func (o *IdentitySearch) SetAvatarUrl(v string) {
	o.AvatarUrl = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *IdentitySearch) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentitySearch) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *IdentitySearch) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *IdentitySearch) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetHandle returns the Handle field value
func (o *IdentitySearch) GetHandle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Handle
}

// GetHandleOk returns a tuple with the Handle field value
// and a boolean to check if the value has been set.
func (o *IdentitySearch) GetHandleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Handle, true
}

// SetHandle sets field value
func (o *IdentitySearch) SetHandle(v string) {
	o.Handle = v
}

// GetId returns the Id field value
func (o *IdentitySearch) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *IdentitySearch) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *IdentitySearch) SetId(v string) {
	o.Id = v
}

func (o IdentitySearch) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AvatarUrl != nil {
		toSerialize["avatar_url"] = o.AvatarUrl
	}
	if o.DisplayName != nil {
		toSerialize["display_name"] = o.DisplayName
	}
	if true {
		toSerialize["handle"] = o.Handle
	}
	if true {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableIdentitySearch struct {
	value *IdentitySearch
	isSet bool
}

func (v NullableIdentitySearch) Get() *IdentitySearch {
	return v.value
}

func (v *NullableIdentitySearch) Set(val *IdentitySearch) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentitySearch) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentitySearch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentitySearch(val *IdentitySearch) *NullableIdentitySearch {
	return &NullableIdentitySearch{value: val, isSet: true}
}

func (v NullableIdentitySearch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentitySearch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
