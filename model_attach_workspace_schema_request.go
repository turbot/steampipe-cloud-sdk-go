/*
Steampipe Cloud

Steampipe Cloud is a hosted version of Steampipe (https://steampipe.io), an open source tool to instantly query your cloud services (e.g. AWS, Azure, GCP and more) with SQL. No DB required.

API version: {{OPEN_API_VERSION}}
Contact: help@steampipe.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package steampipecloud

import (
	"encoding/json"
)

// AttachWorkspaceSchemaRequest struct for AttachWorkspaceSchemaRequest
type AttachWorkspaceSchemaRequest struct {
	ConnectionHandle string `json:"connection_handle"`
}

// NewAttachWorkspaceSchemaRequest instantiates a new AttachWorkspaceSchemaRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttachWorkspaceSchemaRequest(connectionHandle string) *AttachWorkspaceSchemaRequest {
	this := AttachWorkspaceSchemaRequest{}
	this.ConnectionHandle = connectionHandle
	return &this
}

// NewAttachWorkspaceSchemaRequestWithDefaults instantiates a new AttachWorkspaceSchemaRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttachWorkspaceSchemaRequestWithDefaults() *AttachWorkspaceSchemaRequest {
	this := AttachWorkspaceSchemaRequest{}
	return &this
}

// GetConnectionHandle returns the ConnectionHandle field value
func (o *AttachWorkspaceSchemaRequest) GetConnectionHandle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectionHandle
}

// GetConnectionHandleOk returns a tuple with the ConnectionHandle field value
// and a boolean to check if the value has been set.
func (o *AttachWorkspaceSchemaRequest) GetConnectionHandleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionHandle, true
}

// SetConnectionHandle sets field value
func (o *AttachWorkspaceSchemaRequest) SetConnectionHandle(v string) {
	o.ConnectionHandle = v
}

func (o AttachWorkspaceSchemaRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["connection_handle"] = o.ConnectionHandle
	}
	return json.Marshal(toSerialize)
}

type NullableAttachWorkspaceSchemaRequest struct {
	value *AttachWorkspaceSchemaRequest
	isSet bool
}

func (v NullableAttachWorkspaceSchemaRequest) Get() *AttachWorkspaceSchemaRequest {
	return v.value
}

func (v *NullableAttachWorkspaceSchemaRequest) Set(val *AttachWorkspaceSchemaRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAttachWorkspaceSchemaRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAttachWorkspaceSchemaRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttachWorkspaceSchemaRequest(val *AttachWorkspaceSchemaRequest) *NullableAttachWorkspaceSchemaRequest {
	return &NullableAttachWorkspaceSchemaRequest{value: val, isSet: true}
}

func (v NullableAttachWorkspaceSchemaRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttachWorkspaceSchemaRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
