/*
Steampipe Cloud

Steampipe Cloud is a hosted version of Steampipe (https://steampipe.io), an open source tool to instantly query your cloud services (e.g. AWS, Azure, GCP and more) with SQL. No DB required.

API version: {{OPEN_API_VERSION}}
Contact: help@steampipe.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package steampipecloud

import (
	"encoding/json"
)

// SchemaInfo struct for SchemaInfo
type SchemaInfo struct {
	Description *string       `json:"description,omitempty"`
	Name        string        `json:"name"`
	Tables      []SchemaTable `json:"tables"`
}

// NewSchemaInfo instantiates a new SchemaInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchemaInfo(name string, tables []SchemaTable) *SchemaInfo {
	this := SchemaInfo{}
	this.Name = name
	this.Tables = tables
	return &this
}

// NewSchemaInfoWithDefaults instantiates a new SchemaInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchemaInfoWithDefaults() *SchemaInfo {
	this := SchemaInfo{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *SchemaInfo) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchemaInfo) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *SchemaInfo) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *SchemaInfo) SetDescription(v string) {
	o.Description = &v
}

// GetName returns the Name field value
func (o *SchemaInfo) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *SchemaInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *SchemaInfo) SetName(v string) {
	o.Name = v
}

// GetTables returns the Tables field value
func (o *SchemaInfo) GetTables() []SchemaTable {
	if o == nil {
		var ret []SchemaTable
		return ret
	}

	return o.Tables
}

// GetTablesOk returns a tuple with the Tables field value
// and a boolean to check if the value has been set.
func (o *SchemaInfo) GetTablesOk() (*[]SchemaTable, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Tables, true
}

// SetTables sets field value
func (o *SchemaInfo) SetTables(v []SchemaTable) {
	o.Tables = v
}

func (o SchemaInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["tables"] = o.Tables
	}
	return json.Marshal(toSerialize)
}

type NullableSchemaInfo struct {
	value *SchemaInfo
	isSet bool
}

func (v NullableSchemaInfo) Get() *SchemaInfo {
	return v.value
}

func (v *NullableSchemaInfo) Set(val *SchemaInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSchemaInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSchemaInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchemaInfo(val *SchemaInfo) *NullableSchemaInfo {
	return &NullableSchemaInfo{value: val, isSet: true}
}

func (v NullableSchemaInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchemaInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
