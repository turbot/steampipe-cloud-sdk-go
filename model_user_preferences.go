/*
Steampipe Cloud

Steampipe Cloud is a hosted version of Steampipe (https://steampipe.io), an open source tool to instantly query your cloud services (e.g. AWS, Azure, GCP and more) with SQL. No DB required.

API version: {{OPEN_API_VERSION}}
Contact: help@steampipe.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package steampipecloud

import (
	"encoding/json"
)

// UserPreferences struct for UserPreferences
type UserPreferences struct {
	// Whether the user is subscribed to community update emails.
	CommunicationCommunityUpdates string `json:"communication_community_updates"`
	// Whether the user is subscribed to product update emails.
	CommunicationProductUpdates string `json:"communication_product_updates"`
	// Whether the user is subscribed to tips and tricks emails.
	CommunicationTipsAndTricks string `json:"communication_tips_and_tricks"`
	// The time when the user setting was created.
	CreatedAt string `json:"created_at"`
	// The unique identifier of the user preferences record.
	Id *string `json:"id,omitempty"`
	// The time when the user setting was last updated.
	UpdatedAt *string `json:"updated_at,omitempty"`
	// The current version of the user setting.
	VersionId int32 `json:"version_id"`
}

// NewUserPreferences instantiates a new UserPreferences object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPreferences(communicationCommunityUpdates string, communicationProductUpdates string, communicationTipsAndTricks string, createdAt string, versionId int32) *UserPreferences {
	this := UserPreferences{}
	this.CommunicationCommunityUpdates = communicationCommunityUpdates
	this.CommunicationProductUpdates = communicationProductUpdates
	this.CommunicationTipsAndTricks = communicationTipsAndTricks
	this.CreatedAt = createdAt
	this.VersionId = versionId
	return &this
}

// NewUserPreferencesWithDefaults instantiates a new UserPreferences object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPreferencesWithDefaults() *UserPreferences {
	this := UserPreferences{}
	return &this
}

// GetCommunicationCommunityUpdates returns the CommunicationCommunityUpdates field value
func (o *UserPreferences) GetCommunicationCommunityUpdates() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommunicationCommunityUpdates
}

// GetCommunicationCommunityUpdatesOk returns a tuple with the CommunicationCommunityUpdates field value
// and a boolean to check if the value has been set.
func (o *UserPreferences) GetCommunicationCommunityUpdatesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommunicationCommunityUpdates, true
}

// SetCommunicationCommunityUpdates sets field value
func (o *UserPreferences) SetCommunicationCommunityUpdates(v string) {
	o.CommunicationCommunityUpdates = v
}

// GetCommunicationProductUpdates returns the CommunicationProductUpdates field value
func (o *UserPreferences) GetCommunicationProductUpdates() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommunicationProductUpdates
}

// GetCommunicationProductUpdatesOk returns a tuple with the CommunicationProductUpdates field value
// and a boolean to check if the value has been set.
func (o *UserPreferences) GetCommunicationProductUpdatesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommunicationProductUpdates, true
}

// SetCommunicationProductUpdates sets field value
func (o *UserPreferences) SetCommunicationProductUpdates(v string) {
	o.CommunicationProductUpdates = v
}

// GetCommunicationTipsAndTricks returns the CommunicationTipsAndTricks field value
func (o *UserPreferences) GetCommunicationTipsAndTricks() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommunicationTipsAndTricks
}

// GetCommunicationTipsAndTricksOk returns a tuple with the CommunicationTipsAndTricks field value
// and a boolean to check if the value has been set.
func (o *UserPreferences) GetCommunicationTipsAndTricksOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommunicationTipsAndTricks, true
}

// SetCommunicationTipsAndTricks sets field value
func (o *UserPreferences) SetCommunicationTipsAndTricks(v string) {
	o.CommunicationTipsAndTricks = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *UserPreferences) GetCreatedAt() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *UserPreferences) GetCreatedAtOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *UserPreferences) SetCreatedAt(v string) {
	o.CreatedAt = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *UserPreferences) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPreferences) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *UserPreferences) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *UserPreferences) SetId(v string) {
	o.Id = &v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *UserPreferences) GetUpdatedAt() string {
	if o == nil || o.UpdatedAt == nil {
		var ret string
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserPreferences) GetUpdatedAtOk() (*string, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *UserPreferences) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given string and assigns it to the UpdatedAt field.
func (o *UserPreferences) SetUpdatedAt(v string) {
	o.UpdatedAt = &v
}

// GetVersionId returns the VersionId field value
func (o *UserPreferences) GetVersionId() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.VersionId
}

// GetVersionIdOk returns a tuple with the VersionId field value
// and a boolean to check if the value has been set.
func (o *UserPreferences) GetVersionIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VersionId, true
}

// SetVersionId sets field value
func (o *UserPreferences) SetVersionId(v int32) {
	o.VersionId = v
}

func (o UserPreferences) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["communication_community_updates"] = o.CommunicationCommunityUpdates
	}
	if true {
		toSerialize["communication_product_updates"] = o.CommunicationProductUpdates
	}
	if true {
		toSerialize["communication_tips_and_tricks"] = o.CommunicationTipsAndTricks
	}
	if true {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	if true {
		toSerialize["version_id"] = o.VersionId
	}
	return json.Marshal(toSerialize)
}

type NullableUserPreferences struct {
	value *UserPreferences
	isSet bool
}

func (v NullableUserPreferences) Get() *UserPreferences {
	return v.value
}

func (v *NullableUserPreferences) Set(val *UserPreferences) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPreferences) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPreferences) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPreferences(val *UserPreferences) *NullableUserPreferences {
	return &NullableUserPreferences{value: val, isSet: true}
}

func (v NullableUserPreferences) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPreferences) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
